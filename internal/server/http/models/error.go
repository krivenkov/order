// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error error
//
// swagger:model Error
type Error struct {

	// error
	// Required: true
	// Enum: [server_error access_denied invalid_grant not_found invalid_request]
	Error *string `json:"error"`

	// error description
	// Example: Internal Server Error
	// Required: true
	ErrorDescription *string `json:"errorDescription"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var errorTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["server_error","access_denied","invalid_grant","not_found","invalid_request"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorTypeErrorPropEnum = append(errorTypeErrorPropEnum, v)
	}
}

const (

	// ErrorErrorServerError captures enum value "server_error"
	ErrorErrorServerError string = "server_error"

	// ErrorErrorAccessDenied captures enum value "access_denied"
	ErrorErrorAccessDenied string = "access_denied"

	// ErrorErrorInvalidGrant captures enum value "invalid_grant"
	ErrorErrorInvalidGrant string = "invalid_grant"

	// ErrorErrorNotFound captures enum value "not_found"
	ErrorErrorNotFound string = "not_found"

	// ErrorErrorInvalidRequest captures enum value "invalid_request"
	ErrorErrorInvalidRequest string = "invalid_request"
)

// prop value enum
func (m *Error) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, errorTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Error) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	// value enum
	if err := m.validateErrorEnum("error", "body", *m.Error); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateErrorDescription(formats strfmt.Registry) error {

	if err := validate.Required("errorDescription", "body", m.ErrorDescription); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error based on context it is used
func (m *Error) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
