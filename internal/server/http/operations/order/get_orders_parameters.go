// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetOrdersParams creates a new GetOrdersParams object
// with the default values initialized.
func NewGetOrdersParams() GetOrdersParams {

	var (
		// initialize parameters with default values

		limitDefault         = float64(50)
		offsetDefault        = float64(0)
		sortByDefault        = string("ts_create")
		sortDirectionDefault = string("asc")
	)

	return GetOrdersParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,

		SortBy: &sortByDefault,

		SortDirection: &sortDirectionDefault,
	}
}

// GetOrdersParams contains all the bound params for the get orders operation
// typically these are obtained from a http.Request
//
// swagger:parameters get-orders
type GetOrdersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Maximum: 200
	  Minimum: 10
	  In: query
	  Default: 50
	*/
	Limit *float64
	/*
	  Minimum: 0
	  In: query
	  Default: 0
	*/
	Offset *float64
	/*
	  In: query
	  Default: "ts_create"
	*/
	SortBy *string
	/*
	  In: query
	  Default: "asc"
	*/
	SortDirection *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetOrdersParams() beforehand.
func (o *GetOrdersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sortBy")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortDirection, qhkSortDirection, _ := qs.GetOK("sortDirection")
	if err := o.bindSortDirection(qSortDirection, qhkSortDirection, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetOrdersParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetOrdersParams()
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "float64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetOrdersParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.Minimum("limit", "query", *o.Limit, 10, false); err != nil {
		return err
	}

	if err := validate.Maximum("limit", "query", *o.Limit, 200, false); err != nil {
		return err
	}

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetOrdersParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetOrdersParams()
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "float64", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *GetOrdersParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.Minimum("offset", "query", *o.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *GetOrdersParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetOrdersParams()
		return nil
	}
	o.SortBy = &raw

	if err := o.validateSortBy(formats); err != nil {
		return err
	}

	return nil
}

// validateSortBy carries on validations for parameter SortBy
func (o *GetOrdersParams) validateSortBy(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortBy", "query", *o.SortBy, []interface{}{"ts_create", "name"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortDirection binds and validates parameter SortDirection from query.
func (o *GetOrdersParams) bindSortDirection(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetOrdersParams()
		return nil
	}
	o.SortDirection = &raw

	if err := o.validateSortDirection(formats); err != nil {
		return err
	}

	return nil
}

// validateSortDirection carries on validations for parameter SortDirection
func (o *GetOrdersParams) validateSortDirection(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortDirection", "query", *o.SortDirection, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}
