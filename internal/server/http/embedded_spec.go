// Code generated by go-swagger; DO NOT EDIT.

package http

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API specification for the order-api service",
    "title": "order-api",
    "version": "1.0.1"
  },
  "host": "127.0.0.1",
  "basePath": "/order",
  "paths": {
    "/": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Get a list of all orders",
        "operationId": "get-orders",
        "parameters": [
          {
            "maximum": 200,
            "minimum": 10,
            "type": "number",
            "default": 50,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "number",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              "ts_create",
              "name"
            ],
            "type": "string",
            "default": "ts_create",
            "name": "sortBy",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "asc",
            "name": "sortDirection",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetOrdersResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Create new order",
        "operationId": "create-order",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/orders/count": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Get a count of all orders",
        "operationId": "get-orders-count",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetCountResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Get order",
        "operationId": "get-order",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "JWT": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Update order",
        "operationId": "update-order",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Delete order",
        "operationId": "delete-order",
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "CreateOrderRequest": {
      "type": "object",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "description": "The description of the order.",
          "type": "string"
        },
        "name": {
          "description": "The name of the order.",
          "type": "string"
        }
      }
    },
    "CreateOrderResponse": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "error",
        "errorDescription"
      ],
      "properties": {
        "error": {
          "type": "string",
          "enum": [
            "server_error",
            "access_denied",
            "invalid_grant",
            "not_found",
            "invalid_request"
          ]
        },
        "errorDescription": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "GetCountResponse": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "description": "Content version id of the order.",
          "type": "integer"
        }
      }
    },
    "GetOrderResponse": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "GetOrdersResponse": {
      "type": "object",
      "required": [
        "orders",
        "pagination"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "description": "The description of the order.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "name": {
          "description": "The name of the order.",
          "type": "string"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "title": "Pagination",
      "required": [
        "limit",
        "offset",
        "total"
      ],
      "properties": {
        "limit": {
          "description": "limit of orders",
          "type": "number",
          "default": 1,
          "minimum": 1
        },
        "offset": {
          "description": "offset",
          "type": "number",
          "default": 1,
          "minimum": 1
        },
        "total": {
          "description": "Total items",
          "type": "number"
        }
      }
    },
    "UpdateOrderRequest": {
      "type": "object",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "description": "The description of the order.",
          "type": "string"
        },
        "name": {
          "description": "The name of the order.",
          "type": "string"
        }
      }
    },
    "UpdateOrderResponse": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "description": "JSON Web Token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "order"
    }
  ],
  "x-components": {}
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API specification for the order-api service",
    "title": "order-api",
    "version": "1.0.1"
  },
  "host": "127.0.0.1",
  "basePath": "/order",
  "paths": {
    "/": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Get a list of all orders",
        "operationId": "get-orders",
        "parameters": [
          {
            "maximum": 200,
            "minimum": 10,
            "type": "number",
            "default": 50,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "number",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "enum": [
              "ts_create",
              "name"
            ],
            "type": "string",
            "default": "ts_create",
            "name": "sortBy",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "asc",
            "name": "sortDirection",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetOrdersResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Create new order",
        "operationId": "create-order",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/orders/count": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Get a count of all orders",
        "operationId": "get-orders-count",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetCountResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Get order",
        "operationId": "get-order",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "JWT": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Update order",
        "operationId": "update-order",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "JWT": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "order"
        ],
        "summary": "Delete order",
        "operationId": "delete-order",
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "CreateOrderRequest": {
      "type": "object",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "description": "The description of the order.",
          "type": "string"
        },
        "name": {
          "description": "The name of the order.",
          "type": "string"
        }
      }
    },
    "CreateOrderResponse": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "error",
        "errorDescription"
      ],
      "properties": {
        "error": {
          "type": "string",
          "enum": [
            "server_error",
            "access_denied",
            "invalid_grant",
            "not_found",
            "invalid_request"
          ]
        },
        "errorDescription": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "GetCountResponse": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "description": "Content version id of the order.",
          "type": "integer"
        }
      }
    },
    "GetOrderResponse": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "GetOrdersResponse": {
      "type": "object",
      "required": [
        "orders",
        "pagination"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "description": "The description of the order.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "name": {
          "description": "The name of the order.",
          "type": "string"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "title": "Pagination",
      "required": [
        "limit",
        "offset",
        "total"
      ],
      "properties": {
        "limit": {
          "description": "limit of orders",
          "type": "number",
          "default": 1,
          "minimum": 1
        },
        "offset": {
          "description": "offset",
          "type": "number",
          "default": 1,
          "minimum": 1
        },
        "total": {
          "description": "Total items",
          "type": "number",
          "minimum": 0
        }
      }
    },
    "UpdateOrderRequest": {
      "type": "object",
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "description": {
          "description": "The description of the order.",
          "type": "string"
        },
        "name": {
          "description": "The name of the order.",
          "type": "string"
        }
      }
    },
    "UpdateOrderResponse": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/Order"
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "description": "JSON Web Token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "order"
    }
  ],
  "x-components": {}
}`))
}
