// Code generated by MockGen. DO NOT EDIT.
// Source: querier.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/krivenkov/order/internal/model/order"
	order0 "github.com/krivenkov/pkg/order"
	paginator "github.com/krivenkov/pkg/paginator"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockQuerier) Count(ctx context.Context, filter *order.Filter) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockQuerierMockRecorder) Count(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQuerier)(nil).Count), ctx, filter)
}

// GetItem mocks base method.
func (m *MockQuerier) GetItem(ctx context.Context, filter *order.Filter) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, filter)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockQuerierMockRecorder) GetItem(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockQuerier)(nil).GetItem), ctx, filter)
}

// GetList mocks base method.
func (m *MockQuerier) GetList(ctx context.Context, filter *order.Filter, orders []*order0.Order, pagination *paginator.Pagination) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter, orders, pagination)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockQuerierMockRecorder) GetList(ctx, filter, orders, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockQuerier)(nil).GetList), ctx, filter, orders, pagination)
}
