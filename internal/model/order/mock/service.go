// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/krivenkov/order/internal/model/order"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockService) Count(ctx context.Context, userID string, req *order.GetCountRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, userID, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceMockRecorder) Count(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockService)(nil).Count), ctx, userID, req)
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, userID string, form *order.Form) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, form)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, userID, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, userID, form)
}

// Disable mocks base method.
func (m *MockService) Disable(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockServiceMockRecorder) Disable(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockService)(nil).Disable), ctx, userID)
}

// GetItem mocks base method.
func (m *MockService) GetItem(ctx context.Context, userID, id string) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, userID, id)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockServiceMockRecorder) GetItem(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockService)(nil).GetItem), ctx, userID, id)
}

// GetList mocks base method.
func (m *MockService) GetList(ctx context.Context, userID string, req *order.GetListRequest) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, userID, req)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockServiceMockRecorder) GetList(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockService)(nil).GetList), ctx, userID, req)
}

// InnerGetItem mocks base method.
func (m *MockService) InnerGetItem(ctx context.Context, filter *order.InnerGetItemRequest) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerGetItem", ctx, filter)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InnerGetItem indicates an expected call of InnerGetItem.
func (mr *MockServiceMockRecorder) InnerGetItem(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerGetItem", reflect.TypeOf((*MockService)(nil).InnerGetItem), ctx, filter)
}

// InnerGetList mocks base method.
func (m *MockService) InnerGetList(ctx context.Context, filter *order.InnerGetListRequest) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerGetList", ctx, filter)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InnerGetList indicates an expected call of InnerGetList.
func (mr *MockServiceMockRecorder) InnerGetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerGetList", reflect.TypeOf((*MockService)(nil).InnerGetList), ctx, filter)
}

// SoftDelete mocks base method.
func (m *MockService) SoftDelete(ctx context.Context, userID, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockServiceMockRecorder) SoftDelete(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockService)(nil).SoftDelete), ctx, userID, id)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, userID, id string, form *order.Form) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userID, id, form)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, userID, id, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, userID, id, form)
}
