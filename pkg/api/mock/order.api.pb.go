// Code generated by MockGen. DO NOT EDIT.
// Source: order.api.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/krivenkov/order/pkg/api"
	grpc "google.golang.org/grpc"
)

// MockOrderServiceClient is a mock of OrderServiceClient interface.
type MockOrderServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceClientMockRecorder
}

// MockOrderServiceClientMockRecorder is the mock recorder for MockOrderServiceClient.
type MockOrderServiceClientMockRecorder struct {
	mock *MockOrderServiceClient
}

// NewMockOrderServiceClient creates a new mock instance.
func NewMockOrderServiceClient(ctrl *gomock.Controller) *MockOrderServiceClient {
	mock := &MockOrderServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrderServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceClient) EXPECT() *MockOrderServiceClientMockRecorder {
	return m.recorder
}

// GetOrderItem mocks base method.
func (m *MockOrderServiceClient) GetOrderItem(ctx context.Context, in *api.OrderItemRequest, opts ...grpc.CallOption) (*api.OrderItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderItem", varargs...)
	ret0, _ := ret[0].(*api.OrderItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItem indicates an expected call of GetOrderItem.
func (mr *MockOrderServiceClientMockRecorder) GetOrderItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItem", reflect.TypeOf((*MockOrderServiceClient)(nil).GetOrderItem), varargs...)
}

// GetOrderItemList mocks base method.
func (m *MockOrderServiceClient) GetOrderItemList(ctx context.Context, in *api.OrderItemListRequest, opts ...grpc.CallOption) (*api.OrderItemListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderItemList", varargs...)
	ret0, _ := ret[0].(*api.OrderItemListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemList indicates an expected call of GetOrderItemList.
func (mr *MockOrderServiceClientMockRecorder) GetOrderItemList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemList", reflect.TypeOf((*MockOrderServiceClient)(nil).GetOrderItemList), varargs...)
}

// MockOrderServiceServer is a mock of OrderServiceServer interface.
type MockOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceServerMockRecorder
}

// MockOrderServiceServerMockRecorder is the mock recorder for MockOrderServiceServer.
type MockOrderServiceServerMockRecorder struct {
	mock *MockOrderServiceServer
}

// NewMockOrderServiceServer creates a new mock instance.
func NewMockOrderServiceServer(ctrl *gomock.Controller) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceServer) EXPECT() *MockOrderServiceServerMockRecorder {
	return m.recorder
}

// GetOrderItem mocks base method.
func (m *MockOrderServiceServer) GetOrderItem(arg0 context.Context, arg1 *api.OrderItemRequest) (*api.OrderItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItem", arg0, arg1)
	ret0, _ := ret[0].(*api.OrderItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItem indicates an expected call of GetOrderItem.
func (mr *MockOrderServiceServerMockRecorder) GetOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItem", reflect.TypeOf((*MockOrderServiceServer)(nil).GetOrderItem), arg0, arg1)
}

// GetOrderItemList mocks base method.
func (m *MockOrderServiceServer) GetOrderItemList(arg0 context.Context, arg1 *api.OrderItemListRequest) (*api.OrderItemListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemList", arg0, arg1)
	ret0, _ := ret[0].(*api.OrderItemListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemList indicates an expected call of GetOrderItemList.
func (mr *MockOrderServiceServerMockRecorder) GetOrderItemList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemList", reflect.TypeOf((*MockOrderServiceServer)(nil).GetOrderItemList), arg0, arg1)
}
